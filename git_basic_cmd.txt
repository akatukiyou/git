# Git basic commands 

#  Create a new repo [git] on GitHub and locally
   001. Create a repo on git hub
   002. Create a local repo folder with the same name from step 1
   003. Create a new file
   004. git init
   005. git add .
   006. git commit -m "my first file in xx repo"
        git commit -am "make some changes"   # -am is the same as [add] + [commit], it can be only used for modified existing files, not for new file.
   007. git branch -M git-prod
        git branck
        git checkout 
   008. git remote add origin ssh-link-to-this-repo
   009. git push -u origin git-prod 
   010. git status
   011. git log --oneline


#   Create a new branch [git-dev] locally and push to GitHub
   001. git branch -M git-dev
   002. git checkout git-dev
   002. git push -u origin git-dev

#   Create a new branch [git-stg] locally and push to GitHub
   001. git checkout -b git-stg
   002. git push -u origin git-stg
   003. git branch

#   Delete branch locally
   001. git branch -d localBranchName
        # The -d option will delete the branch only if it has already been pushed and merged with the remote branch. 
        # Use -D instead if you want to force the branch to be deleted, even if it hasn't been pushed or merged yet.
        # 

#   Delete branch remotely        
   001. git push --delete origin remoteBranchName
   002. git push origin :remoteBranchName   # shorter cmd, same as 001.
        # If see error like this "error: unable to push to unqualified destination: remoteBranchName The destination refspec neither matches an existing ref on the remote nor begins with refs/, and we are unable to guess a prefix based on the source ref. error: failed to push some refs to 'git@repository_name'"
        # Meaning someone already deleted remote branch
        # Try synchronize the branch list
        git fetch -p   # -p means "prune"

#   Git status reset 
    # if no [add] & [commid] yet, to reverse to previous version
   001. git status   # check current git status
   002. git checkout -- filename   # this will revert to previous status of the file
    # if [add] file, to revers to previous version
   001. git add .
   002. git reset HEAD filename
   003. git checkout -- filename
   004. git status
    # if [add] and [commit] file already, to revert to previous version
   001. git commit -am "make some changes"
   002. git reset HEAD~
   003. git checkout -- filename
    # reset to previous versions
   001. git reset --hard HEAD   # go back to the last commit
   002. git reset --hard HEAD~   # go back to the [last-1] commit
   003. git reset --hard HEAD~n   # go back to the [last - n] commit

#   Git diff
    # In working directory, making changes, but no [add] or [commit]
   001. git diff
    # After [add] 
   001. git diff --cached

#   Remove and Rename 
   001. git mv old-name new-name
   002. git add .
   003. git rm --cached filename

#   Git Ignore
   001. crearte a file [.gitignore]
   002. modify this file [*.tmp]   # git will no longer manage .tmp file in this folder and all subfolders

#   Git update the last commit
    # if need to make some change to the last commit but dont want to have nwe records in log for the change.
   001. make changes to the file.
   002. git add .
   003. git status
   004. git log --oneline
   005. git commit --amend

